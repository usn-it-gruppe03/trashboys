@import
  "../functions/functions",
  "../variables/variables",
  "../mixins/mixins",
  "../commons/commons";




// ** Init. display resolution breakpoints **
$res_desktop: get('root.resolution.desktop');
$res_desktop_sm: get('root.resolution.desktop-sm');
$res_tablet: get('root.resolution.tablet');
$res_mobile: get('root.resolution.mobile');




// ** Init. media queries **
$mq_desktop: 'only screen and (min-width: #{$res_desktop_sm + 1})';
$mq_desktop_sm: 'only screen and (min-width: #{$res_tablet + 1}) and (max-width: #{$res_desktop_sm})';
$mq_tablet: 'only screen and (min-width: #{$res_mobile + 1}) and (max-width: #{$res_tablet})';
$mq_mobile: 'only screen and (min-width: 0px) and (max-width: #{$res_mobile})';




// ** Init. container max width **
$mw_desktop:     ($res_desktop    - 100px);
$mw_desktop_sm:   ($res_desktop_sm  - 100px);
$mw_tablet:      ($res_tablet     - 100px);
$mw_mobile:      ($res_mobile     - 100px);




// ** Typical grid classes **

// Container.
.container, container-loose {
  width: 100%;
}

// All normal content inside a container; except rows.
.container > *:not(.row) {
  $m_hz: get('content.margin.right') + get('content.margin.left');
  margin: 0 #{$m_hz/2};
  width: calc(100% - #{$m_hz});
}

// Top margin if two containers are next to each other.
.container + .container {
  margin-top: get('content.margin.top');
}

// Margins for rows and columns.
$margin_left: (get('content.margin.left') / 2);
$margin_right: (get('content.margin.right') / 2);

// Row class.
.row {
  @extend %flex-row-left-top;
  @include justify-content(space-between);
  @include align-items(stretch);
  @include flex-wrap(wrap);
  width: calc( 100% - #{$margin_left} - #{$margin_right} );
  margin: 0 #{$margin_right} 0 #{$margin_left};
}

// Column class.
.col {
  margin:
    get('content.margin.top')
    #{(get('content.margin.right')/2)}  // Account for row margin.
    get('content.margin.bottom')
    #{(get('content.margin.left')/2)};  // Account for row margin.
}




// ** Media queries **

// Horizontal margins combined.
$hz_margin: (get('content.margin.right') / 2) + (get('content.margin.left') / 2);

// Query: Mobile.
@media #{$mq_mobile} {
  .container{max-width: $mw_mobile;}
  .col:first-child:nth-last-child(1), .col:first-child:nth-last-child(1) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
  .col:first-child:nth-last-child(2), .col:first-child:nth-last-child(2) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
  .col:first-child:nth-last-child(3), .col:first-child:nth-last-child(3) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
  .col:first-child:nth-last-child(4), .col:first-child:nth-last-child(4) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
}

// Query: Tablet.
@media #{$mq_tablet} {
  .container{max-width: $mw_tablet;}
  .col:first-child:nth-last-child(1), .col:first-child:nth-last-child(1) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
  .col:first-child:nth-last-child(2), .col:first-child:nth-last-child(2) ~ .col{width: calc(100% / 2 - #{$hz_margin});}
  .col:first-child:nth-last-child(3), .col:first-child:nth-last-child(3) ~ .col{width: calc(100% / 2 - #{$hz_margin});}
  .col:first-child:nth-last-child(4), .col:first-child:nth-last-child(4) ~ .col{width: calc(100% / 2 - #{$hz_margin});}
}

// Query: Desktop (small).
@media #{$mq_desktop_sm} {
  .container{max-width: $mw_desktop_sm;}
  .col:first-child:nth-last-child(1), .col:first-child:nth-last-child(1) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
  .col:first-child:nth-last-child(2), .col:first-child:nth-last-child(2) ~ .col{width: calc(100% / 2 - #{$hz_margin});}
  .col:first-child:nth-last-child(3), .col:first-child:nth-last-child(3) ~ .col{width: calc(100% / 3 - #{$hz_margin});}
  .col:first-child:nth-last-child(4), .col:first-child:nth-last-child(4) ~ .col{width: calc(100% / 3 - #{$hz_margin});}
}

// Query: Desktop.
@media #{$mq_desktop} {
  .container{max-width: $mw_desktop;}
  .col:first-child:nth-last-child(1), .col:first-child:nth-last-child(1) ~ .col{width: calc(100% / 1 - #{$hz_margin});}
  .col:first-child:nth-last-child(2), .col:first-child:nth-last-child(2) ~ .col{width: calc(100% / 2 - #{$hz_margin});}
  .col:first-child:nth-last-child(3), .col:first-child:nth-last-child(3) ~ .col{width: calc(100% / 3 - #{$hz_margin});}
  .col:first-child:nth-last-child(4), .col:first-child:nth-last-child(4) ~ .col{width: calc(100% / 4 - #{$hz_margin});}
}
